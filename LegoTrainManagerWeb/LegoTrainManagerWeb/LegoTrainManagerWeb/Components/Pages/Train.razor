@page "/train"

@using LegoTrainManagerWeb.Services

@inject IEsp32Service _esp32Service
@inject ILogger<Train> _logger
@rendermode InteractiveServer

<PageTitle>Train Manager</PageTitle>
<div>
    <h3>Train</h3>
    <h1>Train Control Panel</h1>
</div>
<div>
    <button class="btn btn-primary" @onclick="OnGetWelcomeMessage">Get Welcome Message</button>
    <h3>@_welcomeMessage</h3>
    <h3>@_trainState</h3>
    <h3>@_stopTrain</h3>
</div>
<div>
    <div style="border-style: dashed; padding:10px">
        <button class="btn btn-primary" @onclick="() => OnSetSpeed(60)">Forward fast</button>
        <button class="btn btn-warning" @onclick="() => OnSetSpeed(-60)">Backward fast</button>
        <button class="btn btn-primary" @onclick="() => OnSetSpeed(18)">Forward slow</button>
        <button class="btn btn-warning" @onclick="() => OnSetSpeed(-18)">Backward slow</button>
        <button class="btn btn-danger" @onclick="OnStopTrain">Stop Train</button>
        <button class="btn btn-primary" @onclick="OnGetCurrentTrainState">Train State</button>
    </div>
    <label>
        Set Speed:
        <input type="range" min="-100" max="100" @onchange="OnSetSpeed" @bind-value="_speed" @bind-value:event="oninput" class="slider" id="myRange">
    </label>
    <label>
        Set Speed:
        <input @bind-value="_speed" @bind-value:event="oninput" type="number" />
    </label>
    <button class="btn btn-success" @onclick="OnSetSpeed">Set Speed</button>
</div>

<div>
    <label>
        Set RGB:
        <input @bind-value="R" @bind-value:event="oninput" type="number" max="255" /> R
        <input @bind-value="G" @bind-value:event="oninput" type="number" max="255" /> G
        <input @bind-value="B" @bind-value:event="oninput" type="number" max="255" /> B
    </label>
    <button class="btn btn-primary" @onclick="OnSetRGB">Set LED Color</button>
</div>

@code {
    private string _welcomeMessage = string.Empty;
    private string _trainState = string.Empty;
    private string _stopTrain = string.Empty;
    private int _speed = 0;
    private byte R;
    private byte G;
    private byte B = 255;

    protected override async Task OnInitializedAsync()
    {
        _logger.LogInformation("OnInitializedAsync");
        await base.OnInitializedAsync();
    }

    private async Task OnGetWelcomeMessage()
    {
        _logger.LogInformation("OnGetWelcomeMessage");
        _welcomeMessage = await _esp32Service.GetRoot();
    }

    private async Task OnGetCurrentTrainState()
    {
        _logger.LogInformation("OnGetCurrentTrainState");
        _trainState = await _esp32Service.GetCurrentTrainState();
    }

    private async Task OnStopTrain()
    {
        _logger.LogInformation("OnStopTrain");
        _stopTrain = await _esp32Service.StopTrain();
    }

    private async Task OnSetSpeed()
    {
        _logger.LogInformation("OnSetSpeed");
        await _esp32Service.SetSpeed(_speed);
    }

    private async Task OnSetSpeed(int speed)
    {
        _logger.LogInformation("OnSetSpeed");
        await _esp32Service.SetSpeed(speed);
    }

    private async Task OnSetRGB()
    {
        _logger.LogInformation("OnSetRGB");
        await _esp32Service.SetRGB(R, G, B);
    }

}